{
    "openapi": "3.0.2",
    "info": {
        "title": "PxlsNetworking",
        "version": "0.1.0"
    },
    "paths": {
        "/info": {
            "get": {
                "summary": "Describe the server implementation",
                "description": "Retrieve information about the server configuration, and most notably the names of enabled extensions.",
                "operationId": "info_info_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/InfoResponse"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Missing permission `info`."
                    }
                }
            }
        },
        "/access": {
            "get": {
                "summary": "Get permission info",
                "description": "Get information about what this client can do without encountering a permissions error.",
                "operationId": "access_access_get",
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Permissions"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/boards": {
            "get": {
                "summary": "List all Board objects",
                "operationId": "list_boards_boards_get",
                "parameters": [
                    {
                        "description": "Upper limit to the number of responses in a single page.",
                        "required": false,
                        "schema": {
                            "title": "Limit",
                            "type": "integer",
                            "description": "Upper limit to the number of responses in a single page."
                        },
                        "example": 10,
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Paginated_Reference_Board__"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Missing permission `boards.list`."
                    }
                }
            },
            "post": {
                "summary": "Create a new Board object",
                "operationId": "post_board_boards_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/MinimalBoard"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Reference_Board_"
                                }
                            }
                        },
                        "headers": {
                            "Location": {
                                "convert_underscores": true,
                                "example": "https://pxls.space/my_board"
                            }
                        }
                    },
                    "403": {
                        "description": "Missing permission `boards.post`."
                    }
                }
            }
        },
        "/board/default": {
            "get": {
                "summary": "Default Board",
                "description": "Redirect to the board object of the default board.",
                "operationId": "default_board_board_default_get",
                "responses": {
                    "307": {
                        "description": "Successful Response",
                        "headers": {
                            "Location": {
                                "convert_underscores": true,
                                "example": "https://pxls.space/board/main"
                            }
                        }
                    }
                }
            }
        },
        "/{board_uri}": {
            "get": {
                "summary": "Get a Board object",
                "operationId": "get_board__board_uri__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Board Uri",
                            "type": "string"
                        },
                        "example": "main_board",
                        "name": "board_uri",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Reference_Board_"
                                }
                            }
                        },
                        "headers": {
                            "Pxls-Pixels-Available": {
                                "convert_underscores": true,
                                "example": 2
                            },
                            "Pxls-Next-Available": {
                                "convert_underscores": true,
                                "example": 1641506367
                            }
                        }
                    },
                    "403": {
                        "description": "Missing permission `boards.get`."
                    }
                }
            },
            "delete": {
                "summary": "Remove a Board object",
                "operationId": "delete_board__board_uri__delete",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Board Uri",
                            "type": "string"
                        },
                        "example": "main_board",
                        "name": "board_uri",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchMinimalBoard"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "403": {
                        "description": "Missing permission `boards.delete`."
                    }
                }
            },
            "patch": {
                "summary": "Update a Board object",
                "operationId": "patch_board__board_uri__patch",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Board Uri",
                            "type": "string"
                        },
                        "example": "main_board",
                        "name": "board_uri",
                        "in": "path"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PatchMinimalBoard"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Reference_Board_"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Missing permission `boards.patch`."
                    }
                }
            }
        },
        "/{board_uri}/data/initial": {
            "get": {
                "summary": "Get the initial state of the board",
                "operationId": "get_initial_board__board_uri__data_initial_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Board Uri",
                            "type": "string"
                        },
                        "example": "main_board",
                        "name": "board_uri",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Content-Range",
                            "type": "string"
                        },
                        "example": "bytes 200-1000",
                        "name": "Content-Range",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Binary data. 8-bit palette index for every pixel.",
                        "content": {
                            "application/binary": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Missing permission `boards.data.get`."
                    },
                    "206": {
                        "description": "Successful `Range` Response."
                    },
                    "416": {
                        "description": "Board too large, a smaller `Range` must be specified."
                    }
                }
            },
            "patch": {
                "summary": "Update initial board data",
                "operationId": "patch_initial_board__board_uri__data_initial_patch",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Board Uri",
                            "type": "string"
                        },
                        "example": "main_board",
                        "name": "board_uri",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Data",
                            "type": "string",
                            "format": "binary"
                        },
                        "name": "data",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Content-Range",
                            "type": "string"
                        },
                        "example": "bytes 200-1000",
                        "name": "Content-Range",
                        "in": "header"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "403": {
                        "description": "Missing permission `boards.data.patch`."
                    },
                    "409": {
                        "description": "Invalid patch."
                    }
                }
            }
        },
        "/{board_uri}/data/colors": {
            "get": {
                "summary": "Get the current board data",
                "operationId": "get_board_data__board_uri__data_colors_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Board Uri",
                            "type": "string"
                        },
                        "example": "main_board",
                        "name": "board_uri",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Content-Range",
                            "type": "string"
                        },
                        "example": "bytes 200-1000",
                        "name": "Content-Range",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Binary data. 8-bit palette index for every pixel.",
                        "content": {
                            "application/binary": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Missing permission `boards.data.get`."
                    },
                    "206": {
                        "description": "Successful `Range` Response."
                    },
                    "416": {
                        "description": "Board too large, a smaller `Range` must be specified."
                    }
                }
            }
        },
        "/{board_uri}/data/mask": {
            "get": {
                "summary": "Get the board mask",
                "operationId": "get_board_mask__board_uri__data_mask_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Board Uri",
                            "type": "string"
                        },
                        "example": "main_board",
                        "name": "board_uri",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Content-Range",
                            "type": "string"
                        },
                        "example": "bytes 200-1000",
                        "name": "Content-Range",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Binary data. 8-bit palette index for every pixel. Values correspond to the following behaviors:\n\n    0 -> No placement allowed.\n    1 -> Placement allowed.\n    2 -> Placement allowed if an adjacent pixel has been modified.",
                        "content": {
                            "application/binary": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Missing permission `boards.data.get`."
                    },
                    "206": {
                        "description": "Successful `Range` Response."
                    },
                    "416": {
                        "description": "Board too large, a smaller `Range` must be specified."
                    }
                }
            },
            "patch": {
                "summary": "Update the board mask",
                "operationId": "patch_mask__board_uri__data_mask_patch",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Board Uri",
                            "type": "string"
                        },
                        "example": "main_board",
                        "name": "board_uri",
                        "in": "path"
                    },
                    {
                        "required": true,
                        "schema": {
                            "title": "Data",
                            "type": "string",
                            "format": "binary"
                        },
                        "name": "data",
                        "in": "query"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Content-Range",
                            "type": "string"
                        },
                        "example": "bytes 200-1000",
                        "name": "Content-Range",
                        "in": "header"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Successful Response"
                    },
                    "403": {
                        "description": "Missing permission `boards.data.patch`."
                    },
                    "409": {
                        "description": "Invalid patch."
                    }
                }
            }
        },
        "/{board_uri}/data/timestamps": {
            "get": {
                "summary": "Get the last-modified time of pixels",
                "operationId": "get_timestamps__board_uri__data_timestamps_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Board Uri",
                            "type": "string"
                        },
                        "example": "main_board",
                        "name": "board_uri",
                        "in": "path"
                    },
                    {
                        "required": false,
                        "schema": {
                            "title": "Content-Range",
                            "type": "string"
                        },
                        "example": "bytes 200-1000",
                        "name": "Content-Range",
                        "in": "header"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Binary data. 32-bit unsigned timestamp for every pixel. Bytes are little-endian ordered. Timestamp is seconds since `created_at` as defined in `/board/info`.",
                        "content": {
                            "application/binary": {
                                "schema": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Missing permission `boards.data.get`."
                    },
                    "206": {
                        "description": "Successful `Range` Response."
                    },
                    "416": {
                        "description": "Board too large, a smaller `Range` must be specified."
                    }
                }
            }
        },
        "/{board_uri}/users": {
            "get": {
                "summary": "Get the active user count",
                "operationId": "get_users__board_uri__users_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Board Uri",
                            "type": "string"
                        },
                        "example": "main_board",
                        "name": "board_uri",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserCount"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Missing permission `boards.users`."
                    }
                }
            }
        },
        "/{board_uri}/pixels": {
            "get": {
                "summary": "List all placements",
                "operationId": "get_placements__board_uri__pixels_get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Board Uri",
                            "type": "string"
                        },
                        "example": "main_board",
                        "name": "board_uri",
                        "in": "path"
                    },
                    {
                        "description": "Upper limit to the number of responses in a single page.",
                        "required": false,
                        "schema": {
                            "title": "Limit",
                            "type": "integer",
                            "description": "Upper limit to the number of responses in a single page."
                        },
                        "example": 10,
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A paginated list of `Placement` objects, sorted by timestamp ascending.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Paginated_Placement_"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Missing permission `boards.pixels.list`."
                    }
                }
            }
        },
        "/{board_uri}/pixels/{position}": {
            "get": {
                "summary": "Get a pixel's latest modification",
                "operationId": "get_latest_placement__board_uri__pixels__position__get",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Board Uri",
                            "type": "string"
                        },
                        "example": "main_board",
                        "name": "board_uri",
                        "in": "path"
                    },
                    {
                        "description": "Position on the board. Should match the number of axis for the board it relates to as described by the board's shape.",
                        "required": true,
                        "schema": {
                            "title": "Position",
                            "description": "Position on the board. Should match the number of axis for the board it relates to as described by the board's shape."
                        },
                        "example": 12546,
                        "name": "position",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Placement"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Missing permission `board.pixels.get`."
                    },
                    "404": {
                        "description": "Position has no placements, or is outside of bord dimensions."
                    }
                }
            },
            "post": {
                "summary": "Place a pixel",
                "operationId": "place_pixel__board_uri__pixels__position__post",
                "parameters": [
                    {
                        "required": true,
                        "schema": {
                            "title": "Board Uri",
                            "type": "string"
                        },
                        "example": "main_board",
                        "name": "board_uri",
                        "in": "path"
                    },
                    {
                        "description": "Position on the board.",
                        "required": true,
                        "schema": {
                            "title": "Position",
                            "type": "integer",
                            "description": "Position on the board."
                        },
                        "example": 154785,
                        "name": "position",
                        "in": "path"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/Placement"
                                }
                            }
                        },
                        "headers": {
                            "Pxls-Pixels-Available": {
                                "convert_underscores": true,
                                "example": 2
                            },
                            "Pxls-Next-Available": {
                                "convert_underscores": true,
                                "example": 1641506367
                            }
                        }
                    },
                    "403": {
                        "description": "Missing permission `board.pixels.post`, or mask prevents placement at the specified position."
                    },
                    "404": {
                        "description": "Position is outside of bord dimensions."
                    },
                    "409": {
                        "description": "Placing a pixel here would have no effect."
                    },
                    "429": {
                        "description": "No available pixels to place."
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "Board": {
                "title": "Board",
                "required": [
                    "name",
                    "shape",
                    "palette",
                    "max_pixels_available",
                    "created_at"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name",
                        "type": "string",
                        "example": "Main board"
                    },
                    "shape": {
                        "title": "Shape",
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        },
                        "description": "Describes the ordering of data for the board. It usually contains a single array of size 2 with its elements representing width and height respectively. However, it may contain multiple arrays in which case each array indicates the dimensions of a virtual grid with each grid entry being the next item in the array. This allows effective chunking of board contents using only range requests to board data endpoints. As an example, a shape of `[[2, 2], [500, 500]]` represents a 1000 by 1000 area, broken into 4 subareas. The first 250,000 pixels are entirely contained in the first 500 by 500 area. A shape of `[[2, 2], [2, 2], [250, 250]]` would again have the same size and even the same first 250,000 pixels. It would differ by orienting the first 62,500 pixels in the first 250 by 250 area rather than the first 500 by 125 area as the previous shape would. All dimensions should be interpreted as being of the same length by padding any entries smaller than others with 1s at the end.",
                        "example": [
                            [
                                1920,
                                1080
                            ]
                        ]
                    },
                    "palette": {
                        "title": "Palette",
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/NamedColor"
                        },
                        "example": {
                            "0": {
                                "name": "Light Grey",
                                "value": 13487565
                            },
                            "1": {
                                "name": "Black",
                                "value": 0
                            }
                        }
                    },
                    "max_pixels_available": {
                        "title": "Max Pixels Available",
                        "type": "integer",
                        "description": "Stack size for the board"
                    },
                    "created_at": {
                        "title": "Created At",
                        "type": "integer",
                        "description": "Unix timestamp",
                        "example": 1641504118
                    }
                }
            },
            "HTTPValidationError": {
                "title": "HTTPValidationError",
                "type": "object",
                "properties": {
                    "detail": {
                        "title": "Detail",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        }
                    }
                }
            },
            "InfoResponse": {
                "title": "InfoResponse",
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name",
                        "type": "string",
                        "description": "The server's name",
                        "example": "pxls.space"
                    },
                    "version": {
                        "title": "Version",
                        "type": "string",
                        "description": "The server's current version",
                        "example": "1.2.5"
                    },
                    "source": {
                        "title": "Source",
                        "type": "string",
                        "description": "The address of the server's source code",
                        "example": "https://github.com/pxlsorg/server"
                    },
                    "extensions": {
                        "title": "Extensions",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Available extensions",
                        "example": [
                            "authentification",
                            "roles"
                        ]
                    }
                }
            },
            "MinimalBoard": {
                "title": "MinimalBoard",
                "required": [
                    "name",
                    "shape",
                    "palette"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name",
                        "type": "string",
                        "example": "Main board"
                    },
                    "shape": {
                        "title": "Shape",
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        },
                        "description": "Describes the ordering of data for the board. It usually contains a single array of size 2 with its elements representing width and height respectively. However, it may contain multiple arrays in which case each array indicates the dimensions of a virtual grid with each grid entry being the next item in the array. This allows effective chunking of board contents using only range requests to board data endpoints. As an example, a shape of `[[2, 2], [500, 500]]` represents a 1000 by 1000 area, broken into 4 subareas. The first 250,000 pixels are entirely contained in the first 500 by 500 area. A shape of `[[2, 2], [2, 2], [250, 250]]` would again have the same size and even the same first 250,000 pixels. It would differ by orienting the first 62,500 pixels in the first 250 by 250 area rather than the first 500 by 125 area as the previous shape would. All dimensions should be interpreted as being of the same length by padding any entries smaller than others with 1s at the end.",
                        "example": [
                            [
                                1920,
                                1080
                            ]
                        ]
                    },
                    "palette": {
                        "title": "Palette",
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/NamedColor"
                        },
                        "example": {
                            "0": {
                                "name": "Light Grey",
                                "value": 13487565
                            },
                            "1": {
                                "name": "Black",
                                "value": 0
                            }
                        }
                    }
                }
            },
            "NamedColor": {
                "title": "NamedColor",
                "required": [
                    "name",
                    "value"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name",
                        "type": "string",
                        "example": "Light Grey"
                    },
                    "value": {
                        "title": "Value",
                        "type": "integer",
                        "description": "4-byte ARGB color value",
                        "example": 13487565
                    }
                }
            },
            "Paginated_Placement_": {
                "title": "Paginated[Placement]",
                "required": [
                    "items"
                ],
                "type": "object",
                "properties": {
                    "items": {
                        "title": "Items",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Placement"
                        }
                    },
                    "next": {
                        "title": "Next",
                        "type": "string",
                        "description": "An URI pointing to the continuation of the paginated list.",
                        "example": "https://pxls.space/list/h357%"
                    },
                    "previous": {
                        "title": "Previous",
                        "type": "string",
                        "description": "An URI pointing to the previous pages of the paginated list.",
                        "example": "https://pxls.space/list/p1857%"
                    }
                }
            },
            "Paginated_Reference_Board__": {
                "title": "Paginated[Reference[Board]]",
                "required": [
                    "items"
                ],
                "type": "object",
                "properties": {
                    "items": {
                        "title": "Items",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/Reference_Board_"
                        }
                    },
                    "next": {
                        "title": "Next",
                        "type": "string",
                        "description": "An URI pointing to the continuation of the paginated list.",
                        "example": "https://pxls.space/list/h357%"
                    },
                    "previous": {
                        "title": "Previous",
                        "type": "string",
                        "description": "An URI pointing to the previous pages of the paginated list.",
                        "example": "https://pxls.space/list/p1857%"
                    }
                }
            },
            "PatchMinimalBoard": {
                "title": "PatchMinimalBoard",
                "required": [
                    "name",
                    "shape",
                    "palette"
                ],
                "type": "object",
                "properties": {
                    "name": {
                        "title": "Name",
                        "type": "string",
                        "example": "Main board"
                    },
                    "shape": {
                        "title": "Shape",
                        "type": "array",
                        "items": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        },
                        "description": "Describes the ordering of data for the board. It usually contains a single array of size 2 with its elements representing width and height respectively. However, it may contain multiple arrays in which case each array indicates the dimensions of a virtual grid with each grid entry being the next item in the array. This allows effective chunking of board contents using only range requests to board data endpoints. As an example, a shape of `[[2, 2], [500, 500]]` represents a 1000 by 1000 area, broken into 4 subareas. The first 250,000 pixels are entirely contained in the first 500 by 500 area. A shape of `[[2, 2], [2, 2], [250, 250]]` would again have the same size and even the same first 250,000 pixels. It would differ by orienting the first 62,500 pixels in the first 250 by 250 area rather than the first 500 by 125 area as the previous shape would. All dimensions should be interpreted as being of the same length by padding any entries smaller than others with 1s at the end.",
                        "example": [
                            [
                                1920,
                                1080
                            ]
                        ]
                    },
                    "palette": {
                        "title": "Palette",
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "#/components/schemas/NamedColor"
                        },
                        "example": {
                            "0": {
                                "name": "Light Grey",
                                "value": 13487565
                            },
                            "1": {
                                "name": "Black",
                                "value": 0
                            }
                        }
                    },
                    "max_pixels_available": {
                        "title": "Max Pixels Available",
                        "type": "integer"
                    },
                    "created_at": {
                        "title": "Created At",
                        "type": "integer"
                    }
                }
            },
            "Permissions": {
                "title": "Permissions",
                "required": [
                    "permissions"
                ],
                "type": "object",
                "properties": {
                    "permissions": {
                        "title": "Permissions",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of permissions strings. It represents the actions the client can take without encountering a permissions error.",
                        "example": [
                            "info",
                            "boards.list"
                        ]
                    }
                }
            },
            "Placement": {
                "title": "Placement",
                "required": [
                    "position",
                    "color",
                    "modified"
                ],
                "type": "object",
                "properties": {
                    "position": {
                        "title": "Position",
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Position on the board. Should match the number of axis for the board it relates to as described by the board's shape."
                    },
                    "color": {
                        "title": "Color",
                        "type": "integer"
                    },
                    "modified": {
                        "title": "Modified",
                        "type": "integer",
                        "description": "Unix timestamp",
                        "example": 1641504118
                    }
                }
            },
            "Reference_Board_": {
                "title": "Reference[Board]",
                "required": [
                    "uri"
                ],
                "type": "object",
                "properties": {
                    "uri": {
                        "title": "Uri",
                        "type": "string",
                        "description": "An uri pointing to to a location where the object can be obtained with a simple GET request.",
                        "example": "https://pxls.space/!kljvosdj"
                    },
                    "view": {
                        "title": "View",
                        "allOf": [
                            {
                                "$ref": "#/components/schemas/Board"
                            }
                        ],
                        "description": "A representation of an object."
                    }
                }
            },
            "UserCount": {
                "title": "UserCount",
                "required": [
                    "active",
                    "idle_timeout"
                ],
                "type": "object",
                "properties": {
                    "active": {
                        "title": "Active",
                        "type": "integer"
                    },
                    "idle_timeout": {
                        "title": "Idle Timeout",
                        "type": "number",
                        "description": "Duration before a user is considered inactive, in seconds."
                    }
                }
            },
            "ValidationError": {
                "title": "ValidationError",
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "type": "object",
                "properties": {
                    "loc": {
                        "title": "Location",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "msg": {
                        "title": "Message",
                        "type": "string"
                    },
                    "type": {
                        "title": "Error Type",
                        "type": "string"
                    }
                }
            }
        }
    }
}